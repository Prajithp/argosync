// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	Application *application
	Deployment  *deployment
	Environment *environment
	Region      *region
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Application = &Q.Application
	Deployment = &Q.Deployment
	Environment = &Q.Environment
	Region = &Q.Region
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		Application: newApplication(db, opts...),
		Deployment:  newDeployment(db, opts...),
		Environment: newEnvironment(db, opts...),
		Region:      newRegion(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Application application
	Deployment  deployment
	Environment environment
	Region      region
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Application: q.Application.clone(db),
		Deployment:  q.Deployment.clone(db),
		Environment: q.Environment.clone(db),
		Region:      q.Region.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		Application: q.Application.replaceDB(db),
		Deployment:  q.Deployment.replaceDB(db),
		Environment: q.Environment.replaceDB(db),
		Region:      q.Region.replaceDB(db),
	}
}

type queryCtx struct {
	Application IApplicationDo
	Deployment  IDeploymentDo
	Environment IEnvironmentDo
	Region      IRegionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Application: q.Application.WithContext(ctx),
		Deployment:  q.Deployment.WithContext(ctx),
		Environment: q.Environment.WithContext(ctx),
		Region:      q.Region.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

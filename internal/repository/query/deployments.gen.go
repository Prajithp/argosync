// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Prajithp/argosync/pkg/models"
)

func newDeployment(db *gorm.DB, opts ...gen.DOOption) deployment {
	_deployment := deployment{}

	_deployment.deploymentDo.UseDB(db, opts...)
	_deployment.deploymentDo.UseModel(&models.Deployment{})

	tableName := _deployment.deploymentDo.TableName()
	_deployment.ALL = field.NewAsterisk(tableName)
	_deployment.ID = field.NewUint(tableName, "id")
	_deployment.CreatedAt = field.NewTime(tableName, "created_at")
	_deployment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_deployment.DeletedAt = field.NewField(tableName, "deleted_at")
	_deployment.ApplicationID = field.NewUint(tableName, "application_id")
	_deployment.EnvironmentID = field.NewUint(tableName, "environment_id")
	_deployment.RegionID = field.NewUint(tableName, "region_id")
	_deployment.Version = field.NewString(tableName, "version")
	_deployment.Status = field.NewString(tableName, "status")
	_deployment.DeployedBy = field.NewString(tableName, "deployed_by")
	_deployment.DeployedAt = field.NewTime(tableName, "deployed_at")
	_deployment.RollbackTargetID = field.NewUint(tableName, "rollback_target_id")
	_deployment.Application = deploymentBelongsToApplication{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Application", "models.Application"),
		Deployments: struct {
			field.RelationField
			Application struct {
				field.RelationField
			}
			Environment struct {
				field.RelationField
			}
			Region struct {
				field.RelationField
			}
			RollbackTarget struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Application.Deployments", "models.Deployment"),
			Application: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Application.Deployments.Application", "models.Application"),
			},
			Environment: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Application.Deployments.Environment", "models.Environment"),
			},
			Region: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Application.Deployments.Region", "models.Region"),
			},
			RollbackTarget: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Application.Deployments.RollbackTarget", "models.Deployment"),
			},
		},
	}

	_deployment.Environment = deploymentBelongsToEnvironment{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Environment", "models.Environment"),
	}

	_deployment.Region = deploymentBelongsToRegion{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Region", "models.Region"),
	}

	_deployment.RollbackTarget = deploymentBelongsToRollbackTarget{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RollbackTarget", "models.Deployment"),
	}

	_deployment.fillFieldMap()

	return _deployment
}

type deployment struct {
	deploymentDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	ApplicationID    field.Uint
	EnvironmentID    field.Uint
	RegionID         field.Uint
	Version          field.String
	Status           field.String
	DeployedBy       field.String
	DeployedAt       field.Time
	RollbackTargetID field.Uint
	Application      deploymentBelongsToApplication

	Environment deploymentBelongsToEnvironment

	Region deploymentBelongsToRegion

	RollbackTarget deploymentBelongsToRollbackTarget

	fieldMap map[string]field.Expr
}

func (d deployment) Table(newTableName string) *deployment {
	d.deploymentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployment) As(alias string) *deployment {
	d.deploymentDo.DO = *(d.deploymentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployment) updateTableName(table string) *deployment {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.ApplicationID = field.NewUint(table, "application_id")
	d.EnvironmentID = field.NewUint(table, "environment_id")
	d.RegionID = field.NewUint(table, "region_id")
	d.Version = field.NewString(table, "version")
	d.Status = field.NewString(table, "status")
	d.DeployedBy = field.NewString(table, "deployed_by")
	d.DeployedAt = field.NewTime(table, "deployed_at")
	d.RollbackTargetID = field.NewUint(table, "rollback_target_id")

	d.fillFieldMap()

	return d
}

func (d *deployment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployment) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 16)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["application_id"] = d.ApplicationID
	d.fieldMap["environment_id"] = d.EnvironmentID
	d.fieldMap["region_id"] = d.RegionID
	d.fieldMap["version"] = d.Version
	d.fieldMap["status"] = d.Status
	d.fieldMap["deployed_by"] = d.DeployedBy
	d.fieldMap["deployed_at"] = d.DeployedAt
	d.fieldMap["rollback_target_id"] = d.RollbackTargetID

}

func (d deployment) clone(db *gorm.DB) deployment {
	d.deploymentDo.ReplaceConnPool(db.Statement.ConnPool)
	d.Application.db = db.Session(&gorm.Session{Initialized: true})
	d.Application.db.Statement.ConnPool = db.Statement.ConnPool
	d.Environment.db = db.Session(&gorm.Session{Initialized: true})
	d.Environment.db.Statement.ConnPool = db.Statement.ConnPool
	d.Region.db = db.Session(&gorm.Session{Initialized: true})
	d.Region.db.Statement.ConnPool = db.Statement.ConnPool
	d.RollbackTarget.db = db.Session(&gorm.Session{Initialized: true})
	d.RollbackTarget.db.Statement.ConnPool = db.Statement.ConnPool
	return d
}

func (d deployment) replaceDB(db *gorm.DB) deployment {
	d.deploymentDo.ReplaceDB(db)
	d.Application.db = db.Session(&gorm.Session{})
	d.Environment.db = db.Session(&gorm.Session{})
	d.Region.db = db.Session(&gorm.Session{})
	d.RollbackTarget.db = db.Session(&gorm.Session{})
	return d
}

type deploymentBelongsToApplication struct {
	db *gorm.DB

	field.RelationField

	Deployments struct {
		field.RelationField
		Application struct {
			field.RelationField
		}
		Environment struct {
			field.RelationField
		}
		Region struct {
			field.RelationField
		}
		RollbackTarget struct {
			field.RelationField
		}
	}
}

func (a deploymentBelongsToApplication) Where(conds ...field.Expr) *deploymentBelongsToApplication {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deploymentBelongsToApplication) WithContext(ctx context.Context) *deploymentBelongsToApplication {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deploymentBelongsToApplication) Session(session *gorm.Session) *deploymentBelongsToApplication {
	a.db = a.db.Session(session)
	return &a
}

func (a deploymentBelongsToApplication) Model(m *models.Deployment) *deploymentBelongsToApplicationTx {
	return &deploymentBelongsToApplicationTx{a.db.Model(m).Association(a.Name())}
}

func (a deploymentBelongsToApplication) Unscoped() *deploymentBelongsToApplication {
	a.db = a.db.Unscoped()
	return &a
}

type deploymentBelongsToApplicationTx struct{ tx *gorm.Association }

func (a deploymentBelongsToApplicationTx) Find() (result *models.Application, err error) {
	return result, a.tx.Find(&result)
}

func (a deploymentBelongsToApplicationTx) Append(values ...*models.Application) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deploymentBelongsToApplicationTx) Replace(values ...*models.Application) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deploymentBelongsToApplicationTx) Delete(values ...*models.Application) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deploymentBelongsToApplicationTx) Clear() error {
	return a.tx.Clear()
}

func (a deploymentBelongsToApplicationTx) Count() int64 {
	return a.tx.Count()
}

func (a deploymentBelongsToApplicationTx) Unscoped() *deploymentBelongsToApplicationTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type deploymentBelongsToEnvironment struct {
	db *gorm.DB

	field.RelationField
}

func (a deploymentBelongsToEnvironment) Where(conds ...field.Expr) *deploymentBelongsToEnvironment {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deploymentBelongsToEnvironment) WithContext(ctx context.Context) *deploymentBelongsToEnvironment {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deploymentBelongsToEnvironment) Session(session *gorm.Session) *deploymentBelongsToEnvironment {
	a.db = a.db.Session(session)
	return &a
}

func (a deploymentBelongsToEnvironment) Model(m *models.Deployment) *deploymentBelongsToEnvironmentTx {
	return &deploymentBelongsToEnvironmentTx{a.db.Model(m).Association(a.Name())}
}

func (a deploymentBelongsToEnvironment) Unscoped() *deploymentBelongsToEnvironment {
	a.db = a.db.Unscoped()
	return &a
}

type deploymentBelongsToEnvironmentTx struct{ tx *gorm.Association }

func (a deploymentBelongsToEnvironmentTx) Find() (result *models.Environment, err error) {
	return result, a.tx.Find(&result)
}

func (a deploymentBelongsToEnvironmentTx) Append(values ...*models.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deploymentBelongsToEnvironmentTx) Replace(values ...*models.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deploymentBelongsToEnvironmentTx) Delete(values ...*models.Environment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deploymentBelongsToEnvironmentTx) Clear() error {
	return a.tx.Clear()
}

func (a deploymentBelongsToEnvironmentTx) Count() int64 {
	return a.tx.Count()
}

func (a deploymentBelongsToEnvironmentTx) Unscoped() *deploymentBelongsToEnvironmentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type deploymentBelongsToRegion struct {
	db *gorm.DB

	field.RelationField
}

func (a deploymentBelongsToRegion) Where(conds ...field.Expr) *deploymentBelongsToRegion {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deploymentBelongsToRegion) WithContext(ctx context.Context) *deploymentBelongsToRegion {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deploymentBelongsToRegion) Session(session *gorm.Session) *deploymentBelongsToRegion {
	a.db = a.db.Session(session)
	return &a
}

func (a deploymentBelongsToRegion) Model(m *models.Deployment) *deploymentBelongsToRegionTx {
	return &deploymentBelongsToRegionTx{a.db.Model(m).Association(a.Name())}
}

func (a deploymentBelongsToRegion) Unscoped() *deploymentBelongsToRegion {
	a.db = a.db.Unscoped()
	return &a
}

type deploymentBelongsToRegionTx struct{ tx *gorm.Association }

func (a deploymentBelongsToRegionTx) Find() (result *models.Region, err error) {
	return result, a.tx.Find(&result)
}

func (a deploymentBelongsToRegionTx) Append(values ...*models.Region) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deploymentBelongsToRegionTx) Replace(values ...*models.Region) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deploymentBelongsToRegionTx) Delete(values ...*models.Region) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deploymentBelongsToRegionTx) Clear() error {
	return a.tx.Clear()
}

func (a deploymentBelongsToRegionTx) Count() int64 {
	return a.tx.Count()
}

func (a deploymentBelongsToRegionTx) Unscoped() *deploymentBelongsToRegionTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type deploymentBelongsToRollbackTarget struct {
	db *gorm.DB

	field.RelationField
}

func (a deploymentBelongsToRollbackTarget) Where(conds ...field.Expr) *deploymentBelongsToRollbackTarget {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a deploymentBelongsToRollbackTarget) WithContext(ctx context.Context) *deploymentBelongsToRollbackTarget {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a deploymentBelongsToRollbackTarget) Session(session *gorm.Session) *deploymentBelongsToRollbackTarget {
	a.db = a.db.Session(session)
	return &a
}

func (a deploymentBelongsToRollbackTarget) Model(m *models.Deployment) *deploymentBelongsToRollbackTargetTx {
	return &deploymentBelongsToRollbackTargetTx{a.db.Model(m).Association(a.Name())}
}

func (a deploymentBelongsToRollbackTarget) Unscoped() *deploymentBelongsToRollbackTarget {
	a.db = a.db.Unscoped()
	return &a
}

type deploymentBelongsToRollbackTargetTx struct{ tx *gorm.Association }

func (a deploymentBelongsToRollbackTargetTx) Find() (result *models.Deployment, err error) {
	return result, a.tx.Find(&result)
}

func (a deploymentBelongsToRollbackTargetTx) Append(values ...*models.Deployment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a deploymentBelongsToRollbackTargetTx) Replace(values ...*models.Deployment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a deploymentBelongsToRollbackTargetTx) Delete(values ...*models.Deployment) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a deploymentBelongsToRollbackTargetTx) Clear() error {
	return a.tx.Clear()
}

func (a deploymentBelongsToRollbackTargetTx) Count() int64 {
	return a.tx.Count()
}

func (a deploymentBelongsToRollbackTargetTx) Unscoped() *deploymentBelongsToRollbackTargetTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type deploymentDo struct{ gen.DO }

type IDeploymentDo interface {
	gen.SubQuery
	Debug() IDeploymentDo
	WithContext(ctx context.Context) IDeploymentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeploymentDo
	WriteDB() IDeploymentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeploymentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeploymentDo
	Not(conds ...gen.Condition) IDeploymentDo
	Or(conds ...gen.Condition) IDeploymentDo
	Select(conds ...field.Expr) IDeploymentDo
	Where(conds ...gen.Condition) IDeploymentDo
	Order(conds ...field.Expr) IDeploymentDo
	Distinct(cols ...field.Expr) IDeploymentDo
	Omit(cols ...field.Expr) IDeploymentDo
	Join(table schema.Tabler, on ...field.Expr) IDeploymentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeploymentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeploymentDo
	Group(cols ...field.Expr) IDeploymentDo
	Having(conds ...gen.Condition) IDeploymentDo
	Limit(limit int) IDeploymentDo
	Offset(offset int) IDeploymentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeploymentDo
	Unscoped() IDeploymentDo
	Create(values ...*models.Deployment) error
	CreateInBatches(values []*models.Deployment, batchSize int) error
	Save(values ...*models.Deployment) error
	First() (*models.Deployment, error)
	Take() (*models.Deployment, error)
	Last() (*models.Deployment, error)
	Find() ([]*models.Deployment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Deployment, err error)
	FindInBatches(result *[]*models.Deployment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Deployment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeploymentDo
	Assign(attrs ...field.AssignExpr) IDeploymentDo
	Joins(fields ...field.RelationField) IDeploymentDo
	Preload(fields ...field.RelationField) IDeploymentDo
	FirstOrInit() (*models.Deployment, error)
	FirstOrCreate() (*models.Deployment, error)
	FindByPage(offset int, limit int) (result []*models.Deployment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeploymentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deploymentDo) Debug() IDeploymentDo {
	return d.withDO(d.DO.Debug())
}

func (d deploymentDo) WithContext(ctx context.Context) IDeploymentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deploymentDo) ReadDB() IDeploymentDo {
	return d.Clauses(dbresolver.Read)
}

func (d deploymentDo) WriteDB() IDeploymentDo {
	return d.Clauses(dbresolver.Write)
}

func (d deploymentDo) Session(config *gorm.Session) IDeploymentDo {
	return d.withDO(d.DO.Session(config))
}

func (d deploymentDo) Clauses(conds ...clause.Expression) IDeploymentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deploymentDo) Returning(value interface{}, columns ...string) IDeploymentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deploymentDo) Not(conds ...gen.Condition) IDeploymentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deploymentDo) Or(conds ...gen.Condition) IDeploymentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deploymentDo) Select(conds ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deploymentDo) Where(conds ...gen.Condition) IDeploymentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deploymentDo) Order(conds ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deploymentDo) Distinct(cols ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deploymentDo) Omit(cols ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deploymentDo) Join(table schema.Tabler, on ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deploymentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deploymentDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deploymentDo) Group(cols ...field.Expr) IDeploymentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deploymentDo) Having(conds ...gen.Condition) IDeploymentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deploymentDo) Limit(limit int) IDeploymentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deploymentDo) Offset(offset int) IDeploymentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deploymentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeploymentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deploymentDo) Unscoped() IDeploymentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deploymentDo) Create(values ...*models.Deployment) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deploymentDo) CreateInBatches(values []*models.Deployment, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deploymentDo) Save(values ...*models.Deployment) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deploymentDo) First() (*models.Deployment, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Deployment), nil
	}
}

func (d deploymentDo) Take() (*models.Deployment, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Deployment), nil
	}
}

func (d deploymentDo) Last() (*models.Deployment, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Deployment), nil
	}
}

func (d deploymentDo) Find() ([]*models.Deployment, error) {
	result, err := d.DO.Find()
	return result.([]*models.Deployment), err
}

func (d deploymentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Deployment, err error) {
	buf := make([]*models.Deployment, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deploymentDo) FindInBatches(result *[]*models.Deployment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deploymentDo) Attrs(attrs ...field.AssignExpr) IDeploymentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deploymentDo) Assign(attrs ...field.AssignExpr) IDeploymentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deploymentDo) Joins(fields ...field.RelationField) IDeploymentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deploymentDo) Preload(fields ...field.RelationField) IDeploymentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deploymentDo) FirstOrInit() (*models.Deployment, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Deployment), nil
	}
}

func (d deploymentDo) FirstOrCreate() (*models.Deployment, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Deployment), nil
	}
}

func (d deploymentDo) FindByPage(offset int, limit int) (result []*models.Deployment, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deploymentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deploymentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deploymentDo) Delete(models ...*models.Deployment) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deploymentDo) withDO(do gen.Dao) *deploymentDo {
	d.DO = *do.(*gen.DO)
	return d
}
